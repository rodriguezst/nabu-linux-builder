name: linux-image-builder

on:
  push:
    branches: [ "main", "WIP" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  kernel:
    name: Build kernel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: 'rodriguezst/linux'
          ref: 'v6.1.10-nabu-maverickjb'
          fetch-depth: '1'

      - name: Install Dependencies
        run: sudo apt update && sudo apt install build-essential gcc-aarch64-linux-gnu bc flex bison 7zip kmod bash cpio binutils tar git wget dpkg libssl-dev

      - name: Build kernel
        run: |
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- xiaomi_nabu_maverick_defconfig
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- Image.gz dtbs
          mkdir -p ./install/boot/dtbs
          make ARCH=arm64 install INSTALL_PATH=./install/boot
          make ARCH=arm64 dtbs_install INSTALL_DTBS_PATH=./install/boot/dtbs
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules
          rm -rf ./install/lib/modules/
          make ARCH=arm64 modules_install INSTALL_MOD_PATH=./install
          cd ./install && tar zcvf ../kernel.tar.gz . && cd ..

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4.0.0
        with:
          # Artifact name
          name: kernel.tar.gz
          path: ${{ github.workspace }}/kernel.tar.gz

  boot-installer:
    name: Build edk2 boot (recovery installer.zip)
    runs-on: ubuntu-latest
    needs: kernel

    steps:
      # Checks-out edk2-porting repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: 'edk2-porting/edk2-msm'
          #ref: 'main'
          fetch-depth: '1'

      - uses: actions/download-artifact@v4
        with:
          pattern: kernel.tar.gz
      - name: extract-kernel-artifacts
        shell: bash
        run: |
          mkdir ./artifacts
          tar zxvf kernel.tar.gz/kernel.tar.gz -C ./artifacts
          echo "after untar"
          find ./artifacts
          cp ./artifacts/boot/dtbs/qcom/sm8150-xiaomi-nabu-maverick.dtb ./Platform/Xiaomi/sm8150/FdtBlob/nabu/sm8150-xiaomi-nabu.dtb
          rm -rf ./artifacts

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get -y install build-essential uuid-dev clang llvm iasl nasm gcc-aarch64-linux-gnu abootimg python3-distutils python3-pil python3-git gettext

      - name: Build device
        run: |
          ./build.sh --device nabu --installer-zip

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with: # Artifact name
          name: nabu-boot-installer
          # A file, directory or wildcard pattern that describes what to upload
          path: ./*.zip

  boot-image:
    name: Build edk2 boot (fastboot boot.img)
    runs-on: ubuntu-latest
    needs: kernel

    steps:
      # Checks-out edk2-porting repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: 'edk2-porting/edk2-msm'
          #ref: 'main'
          fetch-depth: '1'

      - uses: actions/download-artifact@v4
        with:
          pattern: kernel.tar.gz
      - name: extract-kernel-artifacts
        shell: bash
        run: |
          mkdir ./artifacts
          tar zxvf kernel.tar.gz/kernel.tar.gz -C ./artifacts
          echo "after untar"
          find ./artifacts
          cp ./artifacts/boot/dtbs/qcom/sm8150-xiaomi-nabu-maverick.dtb ./Platform/Xiaomi/sm8150/FdtBlob/nabu/sm8150-xiaomi-nabu.dtb
          rm -rf ./artifacts

      - name: Install required packages
        run: |
          sudo dpkg --add-architecture i386
          wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -
          sudo add-apt-repository ppa:cybermax-dexter/sdl2-backport
          sudo apt-add-repository "deb https://dl.winehq.org/wine-builds/ubuntu $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get -y install build-essential uuid-dev clang llvm iasl nasm gcc-aarch64-linux-gnu abootimg python3-distutils python3-pil python3-git gettext libgcc-s1:i386 libstdc++6:i386
          sudo apt-get install --install-recommends winehq-stable

      - name: Build an image for nabu
        run: |
          ./build.sh --device nabu

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with: # Artifact name
          name: nabu-boot-image
          # A file, directory or wildcard pattern that describes what to upload
          path: ./*.img

  rootfs:
    name: Build rootfs partition
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #needs: kernel
    strategy:
      matrix:
        desktop: [gnome, mate, kde-plasma, xfce, minimal]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      #- uses: actions/download-artifact@v4
      #  with:
      #    pattern: kernel.tar.gz
      #- name: extract-kernel-artifacts
      #  shell: bash
      #  run: |
      #    tar zxvf kernel.tar.gz/kernel.tar.gz
      #    find ./
      - id: image-download
        uses: robinraju/release-downloader@v1.10
        with:
          repository: 'manjaro-arm/generic-efi-images'
          fileName: '*${{ matrix.desktop }}*.img.xz'
          latest: true
          preRelease: true
      - name: Install Dependencies
        run: sudo apt update && sudo apt install unzip build-essential gcc-aarch64-linux-gnu bc flex bison 7zip kmod bash cpio binutils tar git wget dpkg libssl-dev fdisk

      - name: Build rootfs
        run: |
          echo "${{ fromJson(steps.image-download.outputs.downloaded_files)[0] }}"
          unxz ${{ fromJson(steps.image-download.outputs.downloaded_files)[0] }}
          mv *.img manjaro.img
          fdisk -lu manjaro.img
          chmod +x image_mount.sh
          sudo ./image_mount.sh manjaro.img ./mnt
          ls ./mnt/

      - name: Upload rootfs.7z
        uses: actions/upload-artifact@v4.0.0
        with:
          # Artifact name
          name: rootfs_${{ matrix.desktop }}_${{ matrix.kernel }}
          path: rootfs.7z
          compression-level: 0
  esp:
    name: Build esp partition
    runs-on: ubuntu-latest
    needs: kernel
    strategy:
      matrix:
        desktop: [gnome, mate, kde-plasma, xfce, minimal]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: kernel.tar.gz
      - name: extract-kernel-artifacts
        shell: bash
        run: |
          tar zxvf kernel.tar.gz/kernel.tar.gz
      - id: image-download
        uses: robinraju/release-downloader@v1.10
        with:
          repository: 'manjaro-arm/generic-efi-images'
          fileName: '*${{ matrix.desktop }}*.img.xz'
          latest: true
          preRelease: true
      # TODO: generate grub config (.cfg + full esp img for first installation)
      - name: install-build-dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt install \
            gdisk \
            zip \
            systemd-container \
            bmap-tools asciidoc \
            libarchive-tools \
            git \
            build-essential \
            cmake \
            libarchive-dev \
            pkg-config \
            libcurl4-openssl-dev \
            libgpgme-dev \
            libssl-dev \
            fakeroot \
            dh-autoreconf \
            qemu-utils \
            qemu-efi-aarch64 \
            qemu-system-arm \
            qemu-user-static
          sudo pip3 install meson
          sudo pip3 install ninja
      - name: setup-qemu-binfmt
        shell: bash
        run: |
          sudo wget https://gitlab.manjaro.org/packages/community/manjaro-arm-qemu-static/-/raw/master/qemu-static.conf -O /usr/lib/binfmt.d/qemu-static.conf
          sudo service systemd-binfmt restart
